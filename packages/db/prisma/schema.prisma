// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output        = "../../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  githubId      String
  image         String
  Participant   Participant[]
  hostedParties Party[]       @relation("UserAsHost")
  chats         Chat[]
}

model Participant {
  id            String @id @default(uuid())
  participantId String
  participant   User   @relation(fields: [participantId], references: [id])
  Party         Party  @relation(fields: [partyId], references: [id])
  partyId       String

  @@unique([participantId, partyId])
}

model Party {
  id               String        @id @default(uuid())
  slug             String        @unique @map("slug")
  videoUrl         String
  isPlaying        Boolean       @default(false)
  hostId           String
  host             User          @relation("UserAsHost", fields: [hostId], references: [id])
  createdAt        DateTime      @default(now())
  participants     Participant[]
  currentTimestamp Float         @default(0)
  chats            Chat[]

  @@index([slug])
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  partyId   String
  party     Party    @relation(fields: [partyId], references: [id])
  msg       String
  createdAt DateTime @default(now())
}
